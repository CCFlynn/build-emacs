#!/bin/sh

. ./notify

function clean () {
    [ "x$MESSAGE" != x ] && notify "$MESSAGE"
	rm -rf $SRC
}

function make_dmg () {
    bash emacs-dmg/make-dmg "$1" Emacs emacs-dmg/Applications "$2" emacs-dmg/More... emacs-dmg/background.png emacs-dmg/dot-DS_Store
}

function build_an_emacs() {
    MESSAGE="$OUT failed to build ($1)"
    (cd $SRC && env CC=$2 ./configure --host=$3 --build=i686-apple-darwin --with-ns &&
        env CC=$2 make clean install)

    mkdir "$SRC/nextstep/$1"
    mv "$SRC/nextstep/Emacs.app" "$SRC/nextstep/$1/Emacs.app"
    BUILT[${#BUILT[@]}]="$SRC/nextstep/$1/Emacs.app"
    KIND[${#KIND[@]}]="$1"
}

function lipo_2_emacs() {
    for f in `cd $1 && find Contents/MacOS -type f -print0 | xargs -n 1 -0 file | perl -ne 'print "$1\n" if /(.*): Mach-O .*(executable|universal binary)/'`; do
        echo "$f"
        lipo -create "$1/$f" "$2/$f" -output "$1/$f.universal"
        mv -f "$1/$f.universal" "$1/$f";
    done
}

function lipo_emacs() {
    out=$1
    shift
    while [ x"$1" != x ]; do
        lipo_2_emacs $out $1
        shift
    done
    BUILT=($out)
    KIND=(universal)
}

function make_emacs_dmg() {
    make_dmg "$SRC/nextstep/Emacs.dmg" "$1" || exit
    mv $SRC/nextstep/Emacs.dmg emacs-builds/$OUT-"$2"-`sw_vers -productVersion`.dmg
    notify "Successfully built $2 emacs: "$OUT-"$2"-`sw_vers -productVersion`.dmg
}

function build_universal_emacs() {
    build_an_emacs intel64 gcc                              x86_64-apple-darwin
    build_an_emacs intel32 i686-apple-darwin10-gcc-4.2.1    i686-apple-darwin
    build_an_emacs powerpc powerpc-apple-darwin10-gcc-4.2.1 powerpc-apple-darwin
    if [ ${#BUILT[@]} == 0 ]; then
        return -1
    fi
    if [ ${#BUILT[@]} -gt 1 ]; then
        echo "Running lipo on these Emacs flavors: ${KIND[@]}"
        lipo_emacs "${BUILT[@]}"
    else
        echo "Only built ${#BUILT[@]} variant of emacs. No lipo necessary."
    fi
    make_emacs_dmg "${BUILT[0]}" "${KIND[0]}"
}

function build_emacs () {
    SRC="$1"
    OUT="$2"

    MESSAGE="$OUT build failed (native)"

    trap clean INT EXIT

    build_universal_emacs

    MESSAGE=""

    trap "" INT EXIT

    clean
}
