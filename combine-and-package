#!/usr/bin/env ruby
#  Copyright (c) 2014 David Caldwell
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'
require 'shell'
require 'fileutils'
require 'find'
require 'rubygems'
$script_base = File.join ".",File.dirname(__FILE__)
def script_base(*path)
  File.join($script_base, *path)
end
require script_base('verbose-shell.rb')
Vsh = VerboseShell

def combine(tars, out_app)
  base = nil
  emacsen = tars.map { |tarball_path|
    dir = File.dirname tarball_path
    tarball = File.basename tarball_path
    tarball =~                                /^(Emacs-([\d.]+))-([\d.]+)-([^-]+).tar/ or
    tarball =~                        /^(Emacs-pretest-([\d.]+))-([\d.]+)-([^-]+).tar/ or
    tarball =~ /^(Emacs-(20\d\d-\d\d-\d\d_\d\d-\d\d-\d\d-[^-]+))-([\d.]+)-([^-]+).tar/ or abort "Couldn't parse version from tarball (#{tarball})"
    base ||= $1
    abort "bases don't match: #{tarball} vs #{base}" unless base == $1
    { :tar => tarball, :version => $2, :mac_os => Gem::Version.new($3), :arch => $4,
      :dir => dir, :app => File.join(dir,'Emacs.app') }
  }.sort {|a,b| a[:mac_os] <=> b[:mac_os] }


  FileUtils.rm_rf(out_app)

  emacsen.each do |emacs|
    FileUtils.cd(emacs[:dir]) {
      Vsh.system(*(%W"tar xf #{emacs[:tar]}"))
    }
    if !File.exists? out_app
      Vsh.cp_r(emacs[:app], out_app, :preserve => true)
      Vsh.rm_rf(File.join(out_app,     'Contents/MacOS/bin'))
      Vsh.rm_rf(File.join(out_app,     'Contents/MacOS/libexec'))
    end
    Vsh.cp(  File.join(emacs[:app], 'Contents/MacOS/Emacs'),
             File.join(out_app,     "Contents/MacOS/Emacs-#{emacs[:arch]}-#{emacs[:mac_os]}"))
    Vsh.cp_r(File.join(emacs[:app], 'Contents/MacOS/bin'),
             File.join(out_app,     "Contents/MacOS/bin-#{emacs[:arch]}-#{emacs[:mac_os]}"))
    Vsh.cp_r(File.join(emacs[:app], 'Contents/MacOS/libexec'),
             File.join(out_app,     "Contents/MacOS/libexec-#{emacs[:arch]}-#{emacs[:mac_os]}"))
  end

  Vsh.cp(script_base('launch.rb'),
         File.join(out_app, "Contents/MacOS/Emacs"))

  base
end

def code_sign(app, signer)
  # Old OSes can't handle --deep code signing.
  if Gem::Version.new(`sw_vers -productVersion`) < Gem::Version.new('10.8.0')
    Vsh.system *%W"codesign --sign #{signer} #{app}"
  else
    # HACK: Work around problem with Mac OS X's codesign script detection. It doesn't detect "#! /usr/bin/perl" correctly. :-(
    Find.find(File.join(app, "Contents/MacOS")) do |path|
      next unless File.file?(path) && File.executable?(path)
      if IO.read(path, 4) == '#! /'
        puts "Fixing '#! /' in #{path}"
        IO.write(path, IO.read(path).sub!(%r'^#! /','#!/'))
      end
    end
    Vsh.system *%W"codesign --deep --sign #{signer} #{app}"
  end
end

def make_dmg(out_dmg, app)
  # Git (or anything really) can't store resource forks. So compile the resource fork from scratch:
  Vsh.system *%W"Rez -o #{script_base('emacs-dmg/More.../Alternative Icon')} #{script_base('emacs-dmg/icon.r')}"
  # Set the finder info bit that says the file has a custom icon.
  Vsh.system *%W"xattr -x -w com.apple.FinderInfo #{"00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"} #{script_base("emacs-dmg/More.../Alternative Icon")}"
  Vsh.system *(['bash'] + ($verbose ? ['-x'] : []) +
               [script_base('emacs-dmg/make-dmg'), out_dmg, 'Emacs', app] +
               %W[Applications Heroes.rtf More... background.png dot-DS_Store].map{|f| script_base('emacs-dmg', f) })
end


code_signer = nil
(opts=OptionParser.new do |opts|
  opts.banner = "Usage:\n\t#{$0} [options] <EMACS_TARBALL>..."
  opts.on("-v", "--verbose", "Turn up the verbosity") { |v| Vsh.verbose = true }
  opts.on("-s", "--sign IDENTITY", "Code sign the resulting app using IDENTITY") { |c| code_signer = c }
  opts.on_tail("-h", "--help") { puts opts; exit }
end).parse!

emacsen = ARGV.dup
opts.abort("Need at least one tarball\n\n"+opts.help) if emacsen.length < 1

out_app = 'Emacs.app'
base = combine(emacsen, out_app)

code_sign(out_app, code_signer) if code_signer

make_dmg("#{base}-universal.dmg", out_app)
