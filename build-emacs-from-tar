#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require File.join ".",File.dirname(__FILE__),'verbose-shell.rb'
Vsh = VerboseShell

def build_emacs(src_dir, out_name, options={})
  out_name = out_name + ".tar.bz2"
  puts "building emacs: #{src_dir} => #{out_name}"
  options[:cc] ||= "cc"
  options[:extra_cc_options] ||= ''

  FileUtils.cd(src_dir) do
    min_os_flag = options[:min_os] ? "-mmacosx-version-min=#{options[:min_os]}" : ""
    host_flags = options[:host] ? ["--host=#{options[:host]}", '--build=i686-apple-darwin'] : []

    ENV['CC']="#{options[:cc]} #{min_os_flag} #{options[:extra_cc_options]}"
    Vsh.system_trace(["CC=#{ENV['CC']}"])
    Vsh.system(*(%W"./configure --with-ns")+host_flags) || throw("configure failed")
    Vsh.system(*(%W"make clean install")) || throw("make failed")
    FileUtils.cd('nextstep') { Vsh.system(*(%W"tar cjf #{out_name} Emacs.app")) }
  end
  Vsh.mv(File.join(src_dir, 'nextstep', out_name), out_name, :force => true)
  out_name
end

(opts=OptionParser.new do |opts|
  opts.banner = "Usage:\n\t#{$0} <SOURCE_TARBALL> <KIND> [options]"
  opts.on("-v", "--verbose", "Turn up the verbosity") { |v| Vsh.verbose = true }
  opts.on_tail("-h", "--help") { puts opts; exit }
end).parse!

source_tar = ARGV.shift || opts.abort("Missing <SOURCE_TARBALL>\n\n"+opts.help)
kind       = ARGV.shift || opts.abort("Missing <KIND>\n\n"+opts.help)

label = kind == 'pretest' ? 'pretest-' : ''
version = source_tar =~ %r{^(?:.*/)?emacs-(.*)\.tar} && $1 || throw("couldn't parse version from #{source_tar}")

src_dir = 'emacs-source'

Vsh.rm_rf src_dir
Vsh.mkdir_p src_dir
FileUtils.cd(src_dir) do
  Vsh.system(*%W'tar xf #{"../"+source_tar} --strip-components=1')
end

binary = build_emacs src_dir, "Emacs-#{label}#{version}-#{`sw_vers -productVersion`.chomp}-#{`uname -m`.chomp}"

puts "Built #{binary}"
